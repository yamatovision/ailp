// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザーモデル
model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String?
  status        String         @default("active") // active, trial, inactive, withdrawn
  role          String         @default("user")   // admin, user
  plan          String         @default("basic")  // basic, premium
  lastLoginAt   DateTime?
  image         String?
  notes         String?
  expirationDate DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lps           LP[]
  lpProjects    LpProject[]
  testSettings  TestSetting[]
  assistantConfigs   AssistantConfig[]
  assistantSessions  AssistantSession[]
}

// LPモデル（5dayChallengeLP互換）
model LP {
  id            String           @id @default(cuid())
  userId        String
  name          String
  description   String?
  publishedUrl  String?          // 公開時のURL
  slug          String?          @unique // 公開時のスラッグ（短縮URL用）
  status        String           @default("draft") // draft, published, testing, archived
  designSystem  Json?            // デザインシステム設定をJSON形式で保存
  designStyle   String?          // デザインスタイル（modern, corporate, vibrant, minimal等）
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  components    LPComponent[]
  sessions      LPSession[]
  events        LPEvent[]
  stats         LPStats?
}

// LPコンポーネントモデル（5dayChallengeLP互換）
model LPComponent {
  id            String           @id @default(cuid())
  lpId          String
  componentType String           // hero, benefits, cta等
  name          String?
  position      Int
  html          String?          @db.Text // バリアントAのHTML
  css           String?          @db.Text // 共通CSS（あれば）
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  lp            LP               @relation(fields: [lpId], references: [id], onDelete: Cascade)
  variants      ComponentVariant[]
  events        ComponentEvent[]
  stats         ComponentStats[]
}

// コンポーネントバリアントモデル（5dayChallengeLP互換）
model ComponentVariant {
  id            String           @id @default(cuid())
  componentId   String
  variant       String           // 'a' or 'b'
  html          String?          @db.Text
  css           String?          @db.Text
  metadata      Json?            // 追加情報
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  component     LPComponent      @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

// LPセッションモデル
model LPSession {
  id                  String           @id @default(cuid())
  lpId                String
  startedAt           DateTime         @default(now())
  userAgent           String?
  referrer            String?
  ipAddress           String?
  utmSource           String?
  utmCampaign         String?
  deviceType          String?          // mobile, tablet, desktop
  browserType         String?
  hasConverted        Boolean          @default(false)
  conversionType      String?
  conversionTimestamp DateTime?
  duration            Int?             // 滞在時間（秒）
  lp                  LP               @relation(fields: [lpId], references: [id], onDelete: Cascade)
  events              LPEvent[]
  componentEvents     ComponentEvent[]
}

// LPイベントモデル
model LPEvent {
  id            String           @id @default(cuid())
  sessionId     String
  lpId          String
  eventType     String           // pageview, click, scroll, conversion, exit等
  timestamp     DateTime         @default(now())
  path          String?          // イベント発生時のパス
  search        String?          // クエリパラメータ
  data          Json?            // イベント固有データ
  session       LPSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  lp            LP               @relation(fields: [lpId], references: [id], onDelete: Cascade)
}

// コンポーネントイベントモデル
model ComponentEvent {
  id            String           @id @default(cuid())
  sessionId     String
  lpId          String
  componentId   String
  variant       String           // 'a' or 'b'
  eventType     String           // view, click, scroll, etc.
  timestamp     DateTime         @default(now())
  data          Json?            // 追加データ
  session       LPSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  component     LPComponent      @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

// LPコンポーネント統計モデル
model ComponentStats {
  id            String           @id @default(cuid())
  componentId   String
  lpId          String
  variant       String           // 'a' or 'b'
  views         Int              @default(0)
  clicks        Int              @default(0)
  conversions   Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  component     LPComponent      @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

// LP統計モデル
model LPStats {
  id            String           @id @default(cuid())
  lpId          String           @unique
  views         Int              @default(0)
  conversions   Int              @default(0)
  engagements   Int              @default(0) // スクロール深度や他のエンゲージメント指標
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  lp            LP               @relation(fields: [lpId], references: [id], onDelete: Cascade)
}

// LPプロジェクトモデル
model LpProject {
  id            String         @id @default(cuid())
  userId        String
  title         String
  description   String?
  status        String         @default("draft") // draft, active, testing, ended
  thumbnail     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  components    LpComponent[]
  testSettings  TestSetting[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// LPコンポーネントモデル
model LpComponent {
  id            String         @id @default(cuid())
  projectId     String
  componentType String         // hero, benefits, cta, testimonials, pricing, features, faq等
  position      Int
  aiPrompt      String?
  aiParameters  Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  project       LpProject      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variants      LpComponentVariant[]
  testResults   TestResult[]
}

// LPコンポーネントバリアントモデル
model LpComponentVariant {
  id            String         @id @default(cuid())
  componentId   String
  variantType   String         // 'a' or 'b'
  htmlContent   String?
  cssContent    String?
  jsContent     String?
  reactComponent String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  component     LpComponent    @relation(fields: [componentId], references: [id], onDelete: Cascade)
  sessionEvents SessionEvent[]
}

// テスト設定モデル
model TestSetting {
  id               String         @id @default(cuid())
  projectId        String
  userId           String
  name             String
  startDate        DateTime?
  endDate          DateTime?
  conversionGoal   String         // 'form_submit', 'button_click' etc.
  testedComponents Json           // Array of component IDs
  status           String         @default("scheduled") // scheduled, running, completed, stopped
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  project          LpProject      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  testSessions     TestSession[]
  testResults      TestResult[]
}

// テストセッションモデル
model TestSession {
  id               String         @id @default(cuid())
  testId           String
  browserSessionId String         @unique
  deviceType       String         // desktop, tablet, mobile
  startTime        DateTime       @default(now())
  assignedVariants Json           // {'hero': 'a', 'cta': 'b'}
  testSetting      TestSetting    @relation(fields: [testId], references: [id], onDelete: Cascade)
  sessionEvents    SessionEvent[]
}

// セッションイベントモデル
model SessionEvent {
  id            String            @id @default(cuid())
  sessionId     String
  eventType     String            // view, click, conversion
  componentId   String?
  variantId     String?
  timestamp     DateTime          @default(now())
  timeSpent     Int?              // milliseconds
  testSession   TestSession       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  variant       LpComponentVariant? @relation(fields: [variantId], references: [id])
}

// テスト結果モデル
model TestResult {
  id               String         @id @default(cuid())
  testId           String
  componentId      String
  timestamp        DateTime       @default(now())
  variantAData     Json           // Visitor count, conversion count etc.
  variantBData     Json           // Visitor count, conversion count etc.
  improvement      Float?         // Improvement percentage
  confidence       Float?         // Statistical confidence
  isSignificant    Boolean        @default(false)
  winningVariant   String?        // 'a', 'b' or null
  keyInsights      Json?          // Array of insights
  deviceData       Json?          // Device specific analysis
  winningFactors   String?        // Winning factors explanation
  appliedToProduction Boolean     @default(false)
  appliedAt        DateTime?
  testSetting      TestSetting    @relation(fields: [testId], references: [id], onDelete: Cascade)
  component        LpComponent    @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

// テスト履歴モデル
model TestHistory {
  id             String           @id @default(cuid())
  componentId    String
  testDate       DateTime         @default(now())
  variantA       Json             // Variant A data
  variantB       Json             // Variant B data
  primaryMetric  String           // 'conversionRate' etc.
  secondaryMetric String?
  winner         String?          // 'a' or 'b'
  winningFactor  String?
}

// パターン分析モデル
model PatternAnalysis {
  id               String         @id @default(cuid())
  patternName      String
  patternExamples  Json?          // Array of examples
  winCount         Int            @default(0)
  lossCount        Int            @default(0)
  averageLift      Float?
  componentTypes   Json           // Array of component types
  confidenceScore  Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// アシスタントモデル
model Assistant {
  id               String         @id @default(cuid())
  name             String
  title            String         // 表示用タイトル
  description      String?
  systemPrompt     String         // アシスタントの基本指示（システムメッセージ）
  initialMessage   String         // 初期メッセージ
  referenceDocuments String?      // 参考資料（JSON形式で保存）
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  configs          AssistantConfig[]
  sessions         AssistantSession[]
}

// アシスタント設定モデル
model AssistantConfig {
  id               String         @id @default(cuid())
  assistantId      String
  userId           String?        // ユーザー固有の設定の場合に使用
  parameters       Json           // 設定パラメータ
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  assistant        Assistant      @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  user             User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// アシスタントセッションモデル
model AssistantSession {
  id               String         @id @default(cuid())
  assistantId      String
  userId           String
  context          Json?          // セッションコンテキスト
  startTime        DateTime       @default(now())
  endTime          DateTime?
  status           String         @default("active") // active, completed, error
  assistant        Assistant      @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         AssistantMessage[]
}

// アシスタントメッセージモデル
model AssistantMessage {
  id               String         @id @default(cuid())
  sessionId        String
  role             String         // user, assistant, system
  content          String         @db.Text
  timestamp        DateTime       @default(now())
  metadata         Json?          // 追加情報（使用モデル、トークン数など）
  session          AssistantSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}